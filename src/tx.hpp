/*

  ======== TX.HPP ========
  This file defines Transaction-related datastructures.

  If a user wants to send a transaction, they must first generate a secure
  signature using Tx::ConstructAndSign().  This allows other nodes to determine
  that the transaction was in fact generated by the private key associated
  with the public key.

  Nodes that receive a Tx packet should generate the object using Tx::DecodeAndVerify().
  An exception will be thrown if
    1. The Tx was tampered with (if ANY byte of the packet was modified)
    2. The public key was tampered with.
    3. The signature was tampered with.
    4. The signature uses invalid inputs (TODO).

*/


#ifndef TX_HPP
#define TX_HPP

#include <cryptopp/sha.h>
#include <cryptopp/dsa.h>
#include <string>
#include <cinttypes>
#include <vector>
#include "sig.hpp"

struct Tx_Input {

  /* the hash of the block that contains the output we're referencing */
  std::string block_hash;

  /* the hash of the transaction we're referencing */
  std::string input_hash;
  
  /* the index of the output we're referencing */
  uint32_t index;

  std::string Serialize() const;

  static Tx_Input Decode(const std::string& serial, size_t *cr);

};

struct Tx_Output {
  
  /* public key of our target */
  DSA::PublicKey target; 
  uint32_t index;
  uint64_t coins;

  std::string Serialize() const;

  static Tx_Output Decode(const std::string& serial, size_t *cr);

};

struct Tx_Coinbase {

  uint64_t coins;
  DSA::PublicKey target;

};

struct Tx {

  uint32_t version;
  uint32_t timestamp;
  std::string hash;
  DSA::PublicKey origin;    /* sender's public key */ 
  std::string sig;
  std::vector<Tx_Input> inputs;
  std::vector<Tx_Output> outputs;

  std::string Serialize() const;
  bool Verify() const;
  
  static Tx Decode(const std::string& serial, size_t *cr);  
  static Tx DecodeAndVerify(const std::string& serial, 
			    const std::string& sig, 
			    const DSA::PublicKey& key);
  static Tx ConstructAndSign(std::vector<Tx_Input>& inputs,
			     std::vector<Tx_Output>& outputs,
			     const DSA::PublicKey& public_key,
			     const DSA::PrivateKey& private_key);

};

#endif
